
- can body be longer than CONTENT_LENGTH

- consider using venusian
- remove all the packages that were there for b/c
    - record them as we go so we can have something to rewrite it
- replace as much of werkzeug as we can with paste/webob
    - go back to the monkey patched cgi.FieldStorage
        - perhaps make this it's own project?
    - OR strip werkzeugs out

- pyramid.decorator.reify is pretty awesome

- back to my body parser
    sha c2f49140397c447fbbe07f1ebf523fa9c125f060

- str_GET which is cached in the environ and GET which is the decoded one
    - same with POST and FILES

- remove RawReRouter

- routers need a `scan` method to import everyting
    - can use pkgutil.walk_packages to do this

- replace webhelpers with lxml

- strip out runners
    - look at what is in the fcgi one though
    
- Authnz package could provide a router object which tests ACLs
- authn is extracting principals (uid and gid) from a request
- authz is determening if principals are ALLOWed or DENYied by an __acl__
- Pyramid authn_policy interface only supplies:
    - unauthenticated_userid(self, request)
    - remember(self, request, principal, **kw)
    - forget(self, request)
- should the things that AppMixins export be namespaced? Instead of exporting
  everything they could export a single object such as "db" with all the DB
  stuff

- AppPlugin instead of AppMixin
	- use c3linearize to determine proper ordering of plugins

- routing
    
    ReRouter (using regexes)
	PatternRouter (using sprintf style)
    ModuleRouter (as is)
    Chain -> Fork or Branch
    
    The entire graph should be "scanned" before running, loading all modules
    and determining all possible paths. Every single node will have a name,
    although some of them may be silly. We can route by route name with glob
    pattern matching ('*' for any segment), relative from a context router
    with '..' and '.', etc.
    
    Should be able to subclass ReRouter to add modules. Need a decorator which
    tags a method with it's pattern.

	- routers should be able to run authorization code so one can apply
	  repoze.what predicates to an entire branch
	
	- should context kwargs to url_for remain local to the routers which
	  generated them, or shall we switch to them being completely global
		- check out other projects to see what they do

- perhaps absolute uri.path.Path should have an empty first element, or a '/' first element. It seems more sensible that it be an empty first element

- routers should be limited to: ForkRouter, PatternRouter, MapRouter
- routers should have the first positional argument (called name), be their primary key-name in the route data dict.
- ForkRouter should store the fork index in the data as well
- RouteHistory could be much simpler:
    - a list of dicts with a __router__ and __pathinfo__ key, along with the data they returned

- move mako stuff into nitrogen.templates.mako.helpers

- Pyramid renderers are rather nice.
    @Request.application # or @Request.wrap
    @renderer('template.html.mako') # run through MakoRenderer and then HTMLRenderer (which sets the mimetype)
    def something(req):
        return {'key': 'value'}

- asset specification is nice: http://docs.pylonsproject.org/projects/pyramid/1.0/narr/assets.html#asset-specifications

- take a look at Pyramid routing; it is awfully similar to our own ({foo:\d+} syntax and everything)
    - consider adding predicates (see: Custom Route Predicates in http://docs.pylonsproject.org/projects/pyramid/1.0/narr/urldispatch.html)
    - predicates are also used for doing conversions from strings into native types
    - def map_kwargs(func, *names):
        def _map_kwargs(data):
            for name in names:
                data[name] = func(data[name])
            return True
        return _map_kwargs
    - translate the existing parsers to predicates internally
    - perhaps a {name:re:format} -> {id:\d+:%4d}
        - it would be even nicer if we just used the printf syntax to do the pattern matching...
    - can we have a format_predicates as well? It would recieve the data and convert it into the string repr before getting formatted.

- consider simplifying how much information the RouteHistory stores. Perhaps just a list of the routers and the final matched data is good enough to rebuild the route. Perhaps it should be defined such that that is enough.

- consider moving to an events-like notification system for the before_request and after_request sort of callbacks.

- my authorization system should use the __acl__ instance and class properties (building the full ACL from the entire mro of the object).
    - principals could be "mikeboers", "role:admin" and "group:users"
    - OR "username" and "@group" and "+role"
        - these ones mean there is nothing actually special about the principals; they are all handled the same
    - we calculate the full ACL as the merge of the __acl__ parameters along the MRO of the object.
        - we can provide an __acl_bases__ which is used instead of __class__.__bases__ in the C3 (ie. mro) algo.

- make a c3linearize module/package which does the MRO calculation for us, optionally looking at a different attribute for the bases.
- use this new linearizer for the building of classes out of mixins on the AppMixins

- take a good hard look at some sort of plugin architechture or the ZCA (Zope Component Architecture) instead of multiple inheritance for linking all of the App pieces together.
    - where there are dependencies, the individual plugins can define what they need, and what they use
    - the c3linearize could be used to figure out an assembly order of these
    - the plugin api should be as minimal as possible:
        - method to return list of middleware
        - method to return dict of what should be exported to globals
        - method to setup configuration defaults
        
- have to look really hard at the "context" resource that Pyramid is always talking about.

- consider putting the full python virtualenv into an env subdirectory in all of the sites. This may make everything a little bit more self contained and easier to work in.

- nitrogen.route.ChainRouter should accept both lists of routers, and individual routers into *args.
- consider rename of ChainRouter to Fork? They are not actually chaines; we traverse them depth-first until something matches.
- consider moving primary routing algos off of the routers themselves. Then it makes more sense that replacing them in child classes doesn't actually do anything.
- measure the memory footprint of all of the python code I am using on st5.com; perhaps there are a few things I can rip out of other projects and/or replace (ie. beaker depends on paste, repoze.who on repoze) to bring that way down.

- take a look at how pyramid tests itself


- API error handler is not printing out the environment of the request. Can we possibly extend logging to add this to the exception method, or perhaps add a wsgi_exception method?

- pull sign/verify off of query object and into the crypto module
- transform query into a general map serializer
- turn uri.path into a simpler string?

- remove all the werkzeug locals




- remove all of the wsgi wrappers; they are unnessesary

- consider swapping from Werkzeug request/response to webob
    - make_body_seekable is nice
    - the MultiDict works like mine does (and there are interesting variations)
    - urlargs/urlvars are interesting
    - pathinfo_pop/peek are interesting
    - aceept classes look cleaner
    - cookies are cleaner, but mine is more functional (ie. signed cookies)
    - post is NOT nice because cgi.FieldStorage does not have a maximum

- go back to a patched cgi.FieldStorage for the parsing instead of wz
    - need to provide max_memory, max_file_size, etc

- remove all of the wsgi runners
- split proxy module into it's own package
- split route into pystar package
- remove the API module

- split cookies into their own package (or look at webob's)
- remove lipsum
- remove pager into it's own package

- rename nitrogen.db to nitrogen.sqla

- pull the mixin class builder into a package of its own?


- webob.exc is very nice

- add getone (and others) from webob.multidict to MultiMap


- route.ReRouter:
	- _parsers -> parsers (drop the underscore, but still support it for
	  compatibility)

- route
	- A router like the werkzeug Map: patterns map to endpoints
	- string formatting-like patterns: '/%(id)d/%(title)s'
	- trailing slash on the pattern marks as a branch, not a leaf
		a request to a branch without a slash redirects to the slashed version
		(as that is the canonical one)
		
		- ModuleRouter(s) are a branch, not a leaf
		- even if the ReRouter consumes the slash on the end, a slash will
		  still be passed to the next router
	
	- the primary routing function should take the route and immediately
	  generate a URL from it to see if it matches. if it does match, it is the
	  canonical route, and let it go through. if it doesnt generate then the
	  definition is incomplete. if it generates to something else then go
	  through the routing/generating process until 1) we get a canonical route,
	  then redirect to it 2) we cannot route/generate 3) we generate a url we
	  have already routed in this pass, and call it an incomplete definition
	  
	    - can use one of the redirects that has the browser redo the same
	      request with the same mode and everything (with the same data as
	      well, I think...) (this would be a 307)
	    - normalize the request before it even hits the routing algo, then do
	      a redirect at the end
    
    - ModuleRouter(s) should immediately import all their child modules
    
    - in the docs specify that the routing tree is must be a DAG. We may not
      actually go about asserting this, but it is a good idea.
      
        - SignedGateway could be installed optionally by:
            >>> main = ReRouter(...)
            >>> gate = SignedGateway(main, ...)
            >>> __app__ = Chain([gate, main])
            
            This is still a DAG.
    
    - reconsider adding names/keys to routes. you would have a list of names
      and walk back up the route looking for the nearest one that matches the
      first name, then pop it off and go down that branch. if you hit the root
      start going down every route looking for a match. this should be a
      breadth-first search, so consider slowly building up a massive set of
      generators. as soon as one matches the first namespace we restart the
      process with the next one. if kwargs are provided as well then we start
      that routing process at the namespace tip
    
    - is there actually any requirement to store the unrouted path as part of
      the route, or can I just keep the routers, args and kwargs they spit off?
      I think the only thing I'm using it for now is to build up the SCRIPT_NAME
      in the __call__ method, but I could just do this in the route method. OR
      use the regenerated part to figure this out
    
    - consider if the path ReRouter matches against should really always
      start with a slash. Likely yes, as PATH_INFO does this.
      
- send a 413 Request Entity Too Large for when limits are exceeded

- pkgutil: figure out how to split up the project
    1) namespaced_packages=[...] (i think) in setup.py. this may only be nessesary
       for installed packages, but may not be nesseary at all
    2) __import__('pkg_resources').declare_namespace(__name__) in all the
       __init__.py that are namespaced
    2-b) Could potentially use the pkgutil one as well:
        __path__ = __import__('pkgutil').extend_path(__path__, __name__)
        
    

- instead of using submodules I could have a pip requirements file that is
  only going off of the "editing" modules. `make freeze-subs` could

- http.status exceptions should NOT have HTTP prefix as they module chain has
  the "http" in there already.

- seperate uri package into it's own project

    - need to make the path classes make sense; perhaps the path should become
      immutable. you could slice it, and slicing off the front results in you
      loosing the absoluteness. a uri.path.join could be used to join stuff
      together with the same symantics as the os.path.join (use unixpath.join)
      
        >>> from urlparse import urlparse
        >>> urlparse('http://example.com').path
        ''
        >>> urlparse('http://example.com/').path
        '/'
        >>> urlparse('/absolute/path').path
        '/absolute/path'
        >>> urlparse('relative/path').path
        'relative/path'
        
        - perhaps absolute/relative could be an immutable property of a path
          object
        - perhaps the whole thing could be immutable, and we have some extra
          methods on it for path-related functions
            - segment(0) for the first segment
            - slice(...) for slicing up
            
            - is_relative if it is relative
            - is_absolute if it is absolute
            - pop(0) returns the first segment and then the rest
            - normalize() returns it with dot segments removed
    
    - can use urllib.quote(x, '~') as the encoding engine
        
    
    - query to_string and from_string should take the separator and setter as
      arguments:
        Query({a: 1, b:2}).to_string(',', ':', sorted=True) -> 'a:1,b:2'
    
    - the path and userinfo are both used so infrequently. perhaps they can both
      just be strings with some support functions for manipulating them
	
	- determine for sure when + is used instead of %20
		- it seems to be that + is in the query and %20 is in the path. a + in
		  the path is actually a +. i actually have to deal with this too as
		  application/www-form-encoded does encode spaces as +
		- firefox encodes a space as "+" when submitting a form with the GET
		  method. same for posted app/www-form-encoded (ie. no files)
		
	- determine if unicode characters are always encoded as utf8
		- it seems that application/www-form-encoded implies UTF8 encoding (at
		least that is what firefox does, even when it's Accept-Encoding does
		not prefer utf8)
		- same thing with the query string
	- write the encoding functions that go to %u#### and %U########
		- if there is ANY %u or %U in there, then %## is codepoints, not bytes
		- everything already works just fine with utf8 encoding; don't need
		  to mess with something that was rejected by the w3c
	
	- I should likely just accept that my library is for urls not uris
	
	- paste.request.path_info_split could be used

      
