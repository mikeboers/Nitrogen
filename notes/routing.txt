
UNROUTED FORMAT
===============

- If it is non-empty, it MUST start with a slash.
- It MUSH not have any dot segments whatsoever.
- It MAY have empty segments, but it is up to the routers to decide how to deal with them.



NEW SCHEME
==========

I want to have the request method be availible to the routers so I can make RESTful interfaces using the existing system. I can see this expanding so that more and more data becomes availible to the routers in the future, so I propose that we begin passing not just the unrouted path, but an object that encompasses the entire request. Either a namedtuple, or a WSGI environ with only specific keys (PATH_INFO and REQUEST_METHOD for now).

I also had the idea to change the basic interface so that instead of returning
the next step we would route to, we actually return a generator which returns all of the possible next steps in order of preference. This would allow for perhaps a slightly more readable source for having two apps respond to the same route but with different methods. eg.:

    @app.register('/something')
    @allow('GET')
    @as_request
    def GET_something(req, res):
        # return something
    
    @app.register('/something')
    @allow('POST')
    @as_request
    def POST_something(req, res)
        # recieve soemthing

A different way of doing this would actually not require passing the method at all:

    @app.register('/something')
    class something_app(MethodDispatcher):
        @as_request
        def do_GET(self, req, res):
            # return something
        @as_request
        def do_POST(self, req, res):
            # recieve something

The method would then have absolutely no affect on the routing at all.

I am kinda feeling that it is *more* restful to not include anything about the
request except for the path. So not including the environ at all, and maybe even when the root router is called as a WSGI app we route the whole thing and then skip straight to the end segment to call it. This certainly speaks to the routers not knowing about their parents or anything else in the chain.

However, features are fun, and having routers be able to modify the environ as they pass through could let us do some crazy crazy stuff. But do I want that kind of power? And will I actually use it?

WP says that one of the fundamental properties of REST is the identification of resources via URLs. So if we go and try to be as restful as possible we end up routing to apps that represent resources and then return a different entity/representation depending upon other apsects of the request.

So it seems like the easiest way to go, along with what I may deem the "proper" way to go, is to leave routing just based on paths, and nothing else in the quest.

It also seems that I want to reduce all of the differences bettween routing and wsgi diaptching. Right now the route method computes the full route, and the wsgi interface has each router do each step on it's own (and they are passed the environ). I should make it compute the entire route and jump right to the destination.

The namedtuples sounds like a good idea in general.

The generator interface change also does not affect the RESTness, and might make things a little simpler. Lets do that!

In this new method, can I use WSGI based routers that use PATH_INFO and SCRIPT_NAME? Doesn't really look like. But would I really expect to be able to generate names for a WSGI based router? No. The best I can do is provide a _prefix and _postfix to the url_for method, which tags them on the start and end. A special router (something which only affects generation) could be rigged to do this on a case by case basis.

With this new method, we also only need to sync up the SCRIPT_NAME and PATH_INFO when we are actually done, but it may still be best to do it stepwise.



New Interface
-------------


Route:
    A class what managed the entire route. It is essentially a list of routing steps in the form of a RouteChunk. The first chunk contains the originally requested path.
    
RouteChunk:
    An individual part of a route. Essentially a namedtuple of the unrouted path at this point in the route, the router responsible for generating it, and the data produced by the router. The data MUST be a dictionary.




PREVIOUS SCHEME
===============


`Route` is the class the manages the whole route. It is essentially a list of one or more chunks. The chunks keep track of what part of the originally requested path remains unrouted. The first route chunk contains the original
requested path.

`RouteChunk` is an individual part of the route.

The process of constructing a URL moving backwards along a route is called "generating".

Starting with a request to "/controller/action/id"
	1) a ModuleRouter pulls off the "controller" and launches controller.__app__.
	2) a ReRouter matches /action/{id:\d+} and runs whatever app is registered.
	
	There are three chunks of route history:
		1) "/controller/action/id"
		2) "/action/id"
		3) "" with data {'id': whatever}
	
As long as there is a segment left to route, the unrouted will be non-empty. So a unrouted "/" would indicate that there is an empty segment to route.

a RouteChunk will proxy __getitem__ and __getattr__ to the data object if they
have one

a Route will proxy __getitem__ and __getattr__ to the last route segment

I'm going to abandon routing by name for now. I can certainly perform a seach that will give me a list of routes that satisfy a heirarchical name, but then generating a path from that which will agree with the data parameters passed will be tricky. The names will have to take precidence. And then we can't really assert that it will again be routed that way.

I think the thing to do is to just route by parameters. Router.route_step will
work exactly as it already does. Router.generate_step will return a chunk of the path, and who to go to next. To generate the whole thing you start at the
root and keep going until they don't support the protocol anymore.

To generate from an existing route, each step of the process is aided by whatever data was produced at or before that step in the route, minus whatever data is added to lower stages.

interface:
	.route_step(path)
		Return (child, newpath, data), or None if it can't do the routing.
	.generate_step(data)
		Return (pathsegment, child), or None if it can't
		do the generation.
	.modify_path(path)
		Optionally transform the unrouted path.




