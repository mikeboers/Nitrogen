Consider adapting the CHRML project so that is has more HAML like syntax...
Would actually run it through this file and THEN mako.

Arbitrary python with a dash: - for x in item:

Dollar delimeted variables ala Mako: %a{'href': item.link} ${item.title}

Another option entirely is to write this as a small wrapper around Mako
myself. It really wouldn't be all that bad.



- some sort of SASS like meta language for specifying attributes of markup?
	You have one layer of HAML for the markup itself, another layer for adding
	classes and names and attributes to the markup itself, and another layer
	of the css.
	
	Have it have python-like indentation, be haml like, and use markdown type
	syntax for inline stuff.
	
	call it pyml (PYthon Markup Language)
		#id
			%p(key='value', **attributes, **dict((k, v) for something in data))
				This is some content with **inline strength** and *inline emphasis*.  
				Two spaces on the end make a line break.
				
				A full blank line specifies that it should be a seperate
				paragraph, but only if it is in a p block.
				
				We can also control
				%em <>
				    whitespace
				by using \< and/or \> at the end of a tag line. I'm not sure
				what this will actually look like but it is something to think
				about.
				
				Perhaps we ~
				%em
				    ~could~
				~ allow for explicit delimiters for where content starts/stops.
				This example should have the "could" emphasized with only a
				single space around it.
			%
				! if test():
					some stuff in the test. you break out again by dropping out
					of the if. the only nasty part is that we couldn't start
					a tag in one block and finish it in another.
				! for key in data:
					## do something with key in here
				$ 'an expression'.title()
				Or perhaps an ${'inline'.upper()} expression?				
				## comment
				
				%img(src='/whatever.jpg')
				${%img(src='whatever')} for inline stuff