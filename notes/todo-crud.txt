

- remove the second resize handle from crud text areas
- add grippie to all normal text areas

- design a version control mechanism for CRUD
    - crud_history table:
        columns: id, table_name, object_id, commit_time, data, username, comment
    
    - the problem with story all the data from the whole row is that a user would
    be able to affects columns that their form does not have permission to see.
    ideally only the data that the user is allowed to see (controlled by the
    form) would be affected, but this may bring in some data integrity issues.
    if we apply the data to the supplied form object first then we are assured
    that the only changes will be those that the user is allowed to make anyways
    
    - CRUD.commit(id, comment=None, user=None)
        this commits the current state of the object with the given id
    
    - popup box in the bottom right corner lets one pick an older version of
      the data to display
    - a "revision message" box at the bottom lets you comment on the changes
    
    - etags are passed down with every form. this is a hash of the repr of
      sorted item tuples of the dict version of the raw row
        ie md5(repr(sorted(dict(table.select().filter(...).execute().fetchone()).items())))


- proper error handling everywhere
- add nice transitions to UI block





- CRUD needs to have builtin security.
    - a couple predicates for various actions:
        general_predicate (for whichever are missing below)
        create_predicate
        read_predicate (this won't do anything yet)
        update_predicate
        delete_predicate
    - to we prefer "deleteable", "allow_delete" or "can_delete"?
        - either allow_delete or can_delete
        - "allow" seems to be more specific to this situation
    - new "get_perms" method which returns:
        {
            can_create: ...,
            can_update: ...,
            can_delete: ...
        }
    - crud.js should be in the nitrogen public folder
    - make adjustments to crud.js
        - make "url" required
        - get_perms option will call "get_perms" method to get permissions.
          This is assumes to be dependant upon only the url
    - drop a script tag for EVERY thing that is supposed to be editable
        <script>jQuery.crud('#selector', {url="/whatever", can_delete=false, id=1234});</script>
    - TextBlobAppMixin should specify the predicates to use by default for all
      text blobs. The CRUD.allow_* method can be overridden on a single site
      to allow certain people to be able to do certain things.
      
      
JavaScript cleanup
==================

- api methods:
    
    - get_form
        id
        version (optional)
    - get_metadata
        returns permissions and such
    - preview
        parms: all the data
        
    

- use http://json.org/json2.js JSON.stringify to serialize the request.
this will require the server side to parse the request manually

- perhaps have a registry of types that contain defaults:
    $.crud('setup-type', {'type': 'blog-post', url:'whatever'})
    $('...').crud('init', {'type':'blog-post', 'id': 123})

$('#whatever').crud('delete', {<more options>})
$.crud('create', {url: 'whatever'})

Should "url" be "entry_point"? or "uri"?

- get proper permission checking in here everywhere
- proper etags to make sure that things haven't changes
- accept: application/json, and reject others
- content-type: application/json
- proper rest-style status codes
- perhaps the request itself could be a json object so that I can pass
  more complex information to it
