#!/usr/bin/env python2.6
# encoding: utf8

"""USAGE: %s path

Script for discovering and running all of the tests in a given package.

Imports all of the modules that are accessable, and looks for anything that
could be a test:
    - doctests
    - unittest classes
    - functions whose name matches test* (ie. nose tests)

Requirements:
    - nose
    
"""


import os
import sys
import unittest
import doctest
import logging
import traceback


usage = __doc__.rstrip() % sys.argv[0]


try:
    import nose.loader
except ImportError:
    print 'ERROR: could not import nose'
    print usage
    exit(1)

if len(sys.argv) < 2:
    print usage
    exit(1)


# Turn off nose logging.
logging.basicConfig(level=1000)
logging.getLogger('nose').setLevel(1000)

# Setup the path to import.
root = os.path.abspath(sys.argv[1])
sys.path.append(os.path.dirname(root))







nose_loader = nose.loader.TestLoader()
suites = []

# Searching for paths...
for dirpath, dirnames, filenames in os.walk(root):
    
    # Remove all the dirnames which have no __init__ in them.
    for i in reversed(range(len(dirnames))):
        name = os.path.join(dirpath, dirnames[i])
        if not os.path.exists(os.path.join(name, '__init__.py')):
            del dirnames[i]
    
    for name in filenames:
        if name.endswith('.py'):
            
            doc_suite = None
            nose_suite = None
            
            path = os.path.join(dirpath, name)
            
            # Turn it into a module
            name = os.path.splitext(path)[0][len(root)+ 1:].replace(os.path.sep, '.')
            if name.endswith('.__init__'):
                name = name[:-len('.__init__')]
                
            try:
                # print 'importing', name
                m = __import__(name, fromlist=['force']) # Needs something in fromlist.
                
            except Exception as e:
                tb = ''.join(traceback.format_exception(*sys.exc_info())).strip()
                tb = tb.replace('\n', '\n\t\t')
                print '\t%s:' % name, 'exception while importing: ' + tb
            
            else:
                
                # Nose and unit tests
                if nose_loader:
                    nose_suite = nose_loader.loadTestsFromModule(m)
                
                # Doc tests
                try:
                    doc_suite = doctest.DocTestSuite(m)
                except ValueError as e:
                    if len(e.args) <= 1 or e.args[1] != 'has no tests':
                        raise
                
            nose_count = len(list(nose_suite._get_tests())) if nose_suite else 0
            if nose_count:
                suites.append(nose_suite)
                # print "\t\tFound %d nose/unittest test%s." % (nose_count, 's' if nose_count > 1 else '')
                
            
            doc_count = doc_suite.countTestCases() if doc_suite else 0
            if doc_count:
                suites.append(doc_suite)
                # print "\t\tFound %d doc test%s." % (doc_count, 's' if doc_count > 1 else '')
            
            if not (nose_count or doc_count):
                # print '\t%s has no tests' % name
                pass

# Nesseary to flush output before running tests on Windows.
sys.stderr.flush()
sys.stdout.flush()

runner = unittest.TextTestRunner()
suite = unittest.TestSuite()
suite.addTests(suites)
runner.run(suite)