#!/usr/bin/env python2.6
# encoding: utf8
"""Script for running all of the tests in the nitrogen package.

Imports ALL of the modules (except those in lib), looks for unittest stuff
in them, and looks for doctests.

Runs all of the files that are of the form *.test as doctests.

"""

import os
import sys
import unittest
import doctest
import logging
import traceback

# usage = """USAGE: %s path
# 
# nitrogen test runner. Runs tests in the module at path, or in all of the
# reachable modules under path.""" % sys.argv[0]
# 
if len(sys.argv) > 1:
    root = os.path.abspath(sys.argv[1])
else:
    root = os.path.abspath(__file__ + '/../../../nitrogen')

root_dir = os.path.dirname(root)
root_name = os.path.basename(root)

print 'Finding tests in %r package rooted at %r.' % (root_name, root_dir)

# Turn off nose logging.
logger = logging.getLogger('nose')
logger.setLevel(1000)


sys.path.append(os.path.abspath(__file__ + '/../../lib'))
import nose.loader
nose_loader = nose.loader.TestLoader()

sys.path.append(os.path.dirname(root))
suites = []

# Searching for paths...
for dirpath, dirnames, filenames in os.walk(root):
    for name in filenames:
        if name.endswith('.py'):
            
            doc_suite = None
            nose_suite = None
            
            path = os.path.join(dirpath, name)
            
            
            # Turn it into a module
            name = path[len(root_dir) + 1:-3].replace(os.path.sep, '.')
            
            # Skip the library or "binaries".
            if '.lib.' in name or '.bin.' in name:
                continue
                
            # Make sure we can even get to it.
            if not os.path.exists(os.path.join(os.path.dirname(path), '__init__.py')):
                print '\t%s is unreachable' % name
                continue
            
            try:
                m = __import__(name, fromlist=['force']) # Needs something in fromlist.
                
            except Exception as e:
                tb = ''.join(traceback.format_exception(*sys.exc_info())).strip()
                tb = tb.replace('\n', '\n\t\t')
                print '\t%s:' % name, 'exception while importing: ' + tb
            
            else:
                
                # Nose and unit tests
                nose_suite = nose_loader.loadTestsFromModule(m)
                
                # Doc tests
                try:
                    doc_suite = doctest.DocTestSuite(m)
                except ValueError as e:
                    if len(e.args) <= 1 or e.args[1] != 'has no tests':
                        raise
                
            nose_count = len(list(nose_suite._get_tests())) if nose_suite else 0
            if nose_count:
                suites.append(nose_suite)
                # print "\t\tFound %d nose/unittest test%s." % (nose_count, 's' if nose_count > 1 else '')
                
            
            doc_count = doc_suite.countTestCases() if doc_suite else 0
            if doc_count:
                suites.append(doc_suite)
                # print "\t\tFound %d doc test%s." % (doc_count, 's' if doc_count > 1 else '')
            
            if not (nose_count or doc_count):
                print '\t%s has no tests' % name
                
            
        elif name.endswith('.doctest'):
            path = dirpath + '/' + name
            suite = doctest.DocFileSuite(path, module_relative=False, encoding='UTF-8')
            suites.append(suite)

# Nesseary to flush output before running tests on Windows.
sys.stderr.flush()
sys.stdout.flush()

runner = unittest.TextTestRunner()
suite = unittest.TestSuite()
suite.addTests(suites)
runner.run(suite)